import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { jsPDF } from 'jspdf';
import { Calendar, momentLocalizer } from 'react-big-calendar';
import moment from 'moment';
import 'react-big-calendar/lib/css/react-big-calendar.css'; // Import the calendar CSS
import './ViewProjects.css';

const localizer = momentLocalizer(moment); // Localizer for react-big-calendar

function ViewProjects() {
  const [projects, setProjects] = useState([]);
  const [events, setEvents] = useState([]);
  const [editingProject, setEditingProject] = useState(null);

  useEffect(() => {
    fetchProjects();
  }, []);

  const fetchProjects = async () => {
    try {
      const response = await axios.get('http://localhost:4444/api/projects');
      setProjects(response.data); // Set projects from response

      // Map projects to events for the calendar
      const projectEvents = response.data.map(project => ({
        title: project.projectName,
        start: new Date(project.startDate),
        end: new Date(project.endDate),
        allDay: true,
        project,
      }));

      setEvents(projectEvents); // Set the events in the state for the calendar
    } catch (error) {
      console.error('Error fetching projects:', error);
    }
  };

  const handleEdit = (project) => {
    setEditingProject(project); // Set the project to be edited
  };

  const handleSaveChanges = async (updatedProject) => {
    try {
      await axios.put(`http://localhost:4444/api/projects/${updatedProject._id}`, updatedProject);
      setEditingProject(null); // Clear editing state
      fetchProjects(); // Refresh project list
    } catch (error) {
      console.error('Error saving project:', error);
    }
  };

  const handleGenerateReport = async (project) => {
    const doc = new jsPDF();
    
    // Add a header
    doc.setFontSize(18);
    doc.text('Kendra Sahyog - Project Report', 10, 10);
    doc.setFontSize(12);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 10, 20);
    doc.text(`Generated by: ${project.projectManager}`, 10, 25);
    doc.text(`Project Name: ${project.projectName}`, 10, 30);
    
    // Add project details
    const content = `
      Description: ${project.description}
      Project Manager: ${project.projectManager}
      Start Date: ${project.startDate}
      End Date: ${project.endDate}
      Budget: ${project.budget}
      Resources: ${project.resources}
      Stakeholders: ${project.stakeholders}
      Goals: ${project.goals}
      Risks: ${project.risks}
      Milestones: ${project.milestones}
      Reporting Frequency: ${project.reportingFrequency}
      Approval Status: ${project.approvalStatus}
      Address: ${project.address}
    `;

    const splitContent = doc.splitTextToSize(content, 190);
    doc.text(splitContent, 10, 40);
    
    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.text('Kendra Sahyog', 10, doc.internal.pageSize.height - 10);
    }

    doc.save(`${project.projectName}_Report.pdf`);
  };

  return (
    <div className="view-projects-container">
      <h2>View Projects</h2>
      
      {/* Calendar Component */}
      <div style={{ height: '500px' }}>
        <Calendar
          localizer={localizer}
          events={events}
          startAccessor="start"
          endAccessor="end"
          style={{ height: 500, margin: '50px' }}
          onSelectEvent={(event) => handleEdit(event.project)} // Clicking an event allows editing
        />
      </div>

      <ul className="project-list">
        {projects.map((project) => (
          <li key={project._id} className="project-item">
            <h3>{project.projectName}</h3>
            <p>{project.description}</p>
            <div className="project-status">
              <span>Status: {project.approvalStatus}</span>
              <button className="btn edit-btn" onClick={() => handleEdit(project)}>
                Edit
              </button>
              <button className="btn report-btn" onClick={() => handleGenerateReport(project)}>
                Generate Report
              </button>
            </div>
            {editingProject && editingProject._id === project._id && (
              <div className="edit-form">
                <input 
                  type="text" 
                  value={editingProject.projectManager} 
                  onChange={(e) => setEditingProject({ ...editingProject, projectManager: e.target.value })}
                  placeholder="Project Manager"
                />
                <input 
                  type="date" 
                  value={editingProject.startDate} 
                  onChange={(e) => setEditingProject({ ...editingProject, startDate: e.target.value })}
                  placeholder="Start Date"
                />
                <input 
                  type="date" 
                  value={editingProject.endDate} 
                  onChange={(e) => setEditingProject({ ...editingProject, endDate: e.target.value })}
                  placeholder="End Date"
                />
                <input 
                  type="number" 
                  value={editingProject.budget} 
                  onChange={(e) => setEditingProject({ ...editingProject, budget: e.target.value })}
                  placeholder="Budget"
                />
                <textarea 
                  value={editingProject.resources} 
                  onChange={(e) => setEditingProject({ ...editingProject, resources: e.target.value })}
                  placeholder="Resources Needed"
                />
                <input 
                  type="text" 
                  value={editingProject.stakeholders} 
                  onChange={(e) => setEditingProject({ ...editingProject, stakeholders: e.target.value })}
                  placeholder="Stakeholders"
                />
                <textarea 
                  value={editingProject.goals} 
                  onChange={(e) => setEditingProject({ ...editingProject, goals: e.target.value })}
                  placeholder="Goals and Objectives"
                />
                <textarea 
                  value={editingProject.risks} 
                  onChange={(e) => setEditingProject({ ...editingProject, risks: e.target.value })}
                  placeholder="Risks and Mitigation Strategies"
                />
                <textarea 
                  value={editingProject.milestones} 
                  onChange={(e) => setEditingProject({ ...editingProject, milestones: e.target.value })}
                  placeholder="Milestones"
                />
                <input 
                  type="text" 
                  value={editingProject.reportingFrequency} 
                  onChange={(e) => setEditingProject({ ...editingProject, reportingFrequency: e.target.value })}
                  placeholder="Reporting Frequency"
                />
                <input 
                  type="text" 
                  value={editingProject.approvalStatus} 
                  onChange={(e) => setEditingProject({ ...editingProject, approvalStatus: e.target.value })}
                  placeholder="Approval Status"
                />
                <input 
                  type="text" 
                  value={editingProject.address} 
                  onChange={(e) => setEditingProject({ ...editingProject, address: e.target.value })}
                  placeholder="Address"
                />
                <button onClick={() => handleSaveChanges(editingProject)}>Save Changes</button>
              </div>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default ViewProjects;
